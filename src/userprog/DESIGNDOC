             +--------------------------+
             |          EE 415          |
             | PROJECT 2: USER PROGRAMS |
             |     DESIGN DOCUMENT      |
             +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

임승호 limsh2017@kaist.ac.kr
황채영 cyhwang97@kaist.ac.kr

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

There isn't any.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

strtok_r을 사용하여 file_name을 단어 하나씩으로 parsing해서, 단어 개수와 같이 argument_stack 함수에 전달합니다.
이후, argument_stack 함수에서 각 단어의 문자를 하나씩 stack에 저장하고, 저장하면서 각 단어가 저장된 stack의 주소값을 argv_each에 잠시 저장합니다.
단어를 다 저장하면, 4byte를 맞추기 위해 zero padding을 합니다. 이를 위해 단어를 저장할 때 word_count로 저장되는 문자 개수를 셉니다.
이후 0을 저장한 후, 위에서 각 단어가 저장된 주소를 저장한 argv를 하나씩 stack에 저장합니다.
그리고는, 단어의 개수인 count값을 저장하고, return address인 0을 저장합니다.

argv[]의 element가 right order에 있게 하기 위해 stack에 저장할 때 문자를 뒤에서부터 저장을 합니다.

argument_stack 함수에서는 stack page overflow를 고려하지 않았습니다.
대신 exception.c의 page_fault함수에서 esp가 가리키는 주소에서 page fault가 발생할 경우 exit하도록 했습니다.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok_r 함수는 char **save_ptr를 전달해야되고, strtok 함수는 함수 내부에서 해당 포인터를 선언한 후 strtok_r를 호출하여 tokenize를 합니다.
중첩 loop을 이용하여 tokenize하기 위해서는 내부에서 포인터를 선언하는 strtok보다 밖에서 선언하여 전달하는 strtok_r이 더 안전하기 때문에 pintos에서 strtok_r을 사용합니다.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

1. kernel에서 해야할 연산 감소.
2. user 영역에서 parsing을 하고 이를 kernel에 전달하기 전에 확인하면, kernel에 잘못된 값이 전달되는 것을 방지할 수 있다.

                 SYSTEM CALLS
                 ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

[thread.h]
struct thread
{
  struct thread *parent;          exec, wait을 구현하면서 process 간의 hierarchy를 표시하기 위해 각 thread의 부모 thread 저장.
  struct list child_list;         exec, wait을 구현하면서 process 간의 hierarchy를 표시하기 위해 각 thread의 자식 thread list에 저장.
  struct list_elem child_elem;    child_list용 list_elem.

  struct semaphore exit_sema;     wait를 할 때, child thread가 exit할 때까지 기다리기 위해 사용.
  struct semaphore load_sema;     exec을 하고, child thread가 load 완료할 때까지 기다리기 위해 사용.

  bool is_load;     child thread의 load 성공/실패 여부를 parent thread에 전달.
  bool is_exit;     thread의 exit 성공/실패 여부를 저장.
  int exit_status;  thread의 exit status를 저장.

  struct file **fdt;  file descriptor table.
  int fd;             index of file descriptor table.(file descriptor)
}

[syscall.h]
struct lock filesys_lock;  file에 동시에 접근하는 것을 막기위해 사용.

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

파일을 open하면, 해당 파일을 현재 thread의 file descriptor table에 추가하고 file descriptor index를 1 증가시킵니다.
각 thread마다 각자의 file descriptor table과 file descriptor index를 갖고 있으므로, file descriptor는 single process에 unique합니다.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

[reading user data]
먼저 파일에 동시에 접근할 수도 있으므로 lock을 사용합니다.
File descriptor를 이용하여 해당되는 파일을 검색합니다.
File descriptor가 0일 경우(STDIN), 키보드의 데이터를 읽어와 buffer에 저장합니다.
0이 아닐 경우, 검색한 파일이 있을 경우, 파일의 데이터를 size만큼 읽어와 buffer에 저장합니다.
이후 읽은 바이트 수를 return합니다.

[writing user data]
마찬가지로 파일 동시 접근을 막기 위해 lock을 사용합니다.
File descriptor를 이용하여 해당되는 파일을 검색합니다.
File descriptor가 1일 경우(STDOUT), buffer에 저장된 값을 출력 후 size를 return합니다.
1이 아닐 경우, 검색한 파일이 있을 경우, buffer에 저장된 값을 size만큼 파일에 write합니다.
이후 write한 바이트 수를 return합니다.


>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

Least possible number of inspections: 1
한 페이지 안에 4096byte가 모두 들어있을 경우 1번만 inspection 합니다.

Greatest possible number of inspections: 4096
4096byte가 다 따로따로 있을 경우 최대 4096번 inspection을 해야합니다.

2 bytes of data
- Least possible number of inspections: 1
2byte 모두 같은 page에 있을 경우 1번만 inspection합니다.

- Greatest possible number of inspections: 2
2byte가 page 2개에 걸쳐 있을 경우 2번 inspection 해야합니다.


>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

wait system call이 일어나면 child process의 exit_sema를 sema_down시켜 부모 process가 기다리도록 합니다.
이후, child process가 다 run하고 난 후 thread_exit을 하면 thread_exit에서 exit_sema를 sema_up시켜, 부모 process가 다시 실행되도록 합니다.
그러면 부모 process에서 해당 child process를 child list에서 list_remove하고 child process를 free 시킵니다.


>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

System call을 호출하였을 때 syscall_handler 함수에서 해당되는 함수를 실행하기 전에 check_address를 수행합니다. Bad pointer value일 경우 바로 exit(-1)을 하도록 합니다. 이렇게 해서 bad pointer value인지 아닌지를 확인합니다.
또한, 각 system call에서 get_argument에서 받은 argument중 pointer값이 있을 경우 해당 pointer에 대해서도 check_address를 수행합니다.

Error가 발견될 경우 exit(-1)을 수행하는데, 이 exit에서 thread_exit을 하면서 모든 resource를 free합니다.


---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

struct thread 안에 bool type의 is_load 변수를 추가하여 여기에 load의 성공 여부를 저장했습니다.
또한, load_sema라는 semaphore를 사용하여, parent process가 exec system call을 실행했을 때 load_sema를 sema_down시켜 대기시킵니다.
이후 child process가 load를 완료하면, is_load 변수에 load의 성공 여부를 저장하고 load_sema를 sema_up시켜 부모 process가 다시 실행되도록 했습니다.
부모 process에서 is_load값을 확인하여 이 값이 false일 때, 즉 load가 실패했을 경우 -1을 return하도록 하였습니다.


>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

P calls wait(C) before C exits
semaphore를 이용하여 C가 exit할 때까지 기다립니다. wait을 call했을 때 sema_down시켜서 parent process가 기다리도록하고, child process가 exit을 하면 sema_up을 시켜 wait을 끝내도록 합니다.
C가 exit을 하면 thread_exit에서 C의 resource를 free합니다. 그리고 process_wait에서 C를 P의 child_list에서 없앤 후 child에 관한 resource를 free합니다.

P calls wait(C) after C exits
C가 exit한 후이면, resource를 free한 상태이고, 더이상 parent process의 child_list에 존재하지 않을 것입니다.
따라서, process_wait 함수 안에서 get_child_process를 했을 때 NULL값이 돌아올 것입니다. child가 NULL일 경우 -1을 return하고 process_wait가 끝납니다.
C가 이미 exit했으므로 C의 resource는 free된 상태입니다.

P terminates without waiting, before C exits
P의 child_list를 포함한 모든 resource들이 free되기 때문에, P와 C 사이의 부모,자식 관계(hierarchy)명시가 없어집니다.
따라서 P와 C가 각각 따로 terminate됩니다.

P terminates without waiting, after C exits
child process C가 이미 끝났으므로 P는 정상적으로 terminate하고, 모든 resource를 free합니다.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

실제 커널에서 주로 사용되는 방법이기 때문에, 포인터가 user 영역을 가리키는지 확인하는 방법을 사용하였습니다.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

각 process당 파일을 관리하기 위해 struct thread 안에 file descriptor table과 file descriptor를 구현했습니다. 이러한 점에서, 파일을 효율적으로 관리할 수 있습니다.
하지만, file access를 아예 하지 않는 process에서도 file descriptor table을 만들고 메모리 공간을 할당하기 때문에, 메모리 면에서 비효율적일 수 있습니다.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

바꾸지 않았습니다.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?

